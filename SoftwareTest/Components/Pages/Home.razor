@page "/"
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IServiceProvider _serviceProvider
@inject UserManager<Data.ApplicationUser> _userManager

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<AuthorizeView>
	<Authorized>
		<div>You are loggedInd dho</div>
	</Authorized>
	<NotAuthorized>
		<div>You are not LoggedInd dho</div>
	</NotAuthorized>
</AuthorizeView>

@if (_isAuthenticated)
{
	<div>You are logged in</div>
	@if (_isAdmin)
	{
		<div>You are an admin</div>
	}
}
else
{
	<div>You are not logged in</div>
}

@code {
	private bool _isAuthenticated;
	private bool _isAdmin;

	protected override async Task OnInitializedAsync()
	{
		var authenState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenState.User;
		_isAuthenticated = user.Identity.IsAuthenticated;
		_isAdmin = user.IsInRole("Admin");
		if(_isAuthenticated)
		{
			// await CreateRoleAsync("Admin", user.Identity.Name.ToString());
		}
	}

	private void CreateUserRole()
	{
		var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
		var role = new IdentityRole("Admin");
		roleManager.CreateAsync(role);
	}

	private async Task CreateRoleAsync(string role, string user)
	{
		var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
		var userManager = _userManager;
		var userRoleCheck = await roleManager.RoleExistsAsync(role);

		if (!userRoleCheck)
		{
			IdentityRole myRole = new IdentityRole(role);
			await roleManager.CreateAsync(myRole);
		}

		var identityUser = await userManager.FindByEmailAsync(user);
		await userManager.AddToRoleAsync(identityUser, role);
	}
}